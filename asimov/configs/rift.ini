{% if production.event.repository %}
{% assign repo_dir = production.event.repository.directory %}
{% else %}
{% assign repo_dir = "." %}
{% endif %}
[analysis]
ifos={{ production.meta['interferometers'] }}
engine={{ production.meta['engine'] }}
nparallel=4
upload-to-gracedb=False
singularity={{ config['general']['osg'] }}
osg= {{ config['general']['osg'] }}


[paths]
webdir={{ config['general']['webroot'] }}/{{ production.event.name }}/{{ production.name }}


[input]
max-psd-length=10000
padding=16
minimum_realizations_number=8
events=all
analyse-all-time=False
timeslides=False
ignore-gracedb-psd=True
threshold-snr=3
gps-time-file =
ignore-state-vector = True

[condor]
lalsuite-install={{ config["pipelines"]["environment"] }}
ligolw_print=%(lalsuite-install)s/bin/ligolw_print
coherencetest=%(lalsuite-install)s/bin/lalinference_coherence_test
ligo-skymap-from-samples=%(lalsuite-install)s/bin/ligo-skymap-from-samples
ligo-skymap-plot=%(lalsuite-install)s/bin/ligo-skymap-plot
processareas=%(lalsuite-install)s/bin/process_areas
computeroqweights=%(lalsuite-install)s/bin/lalinference_compute_roq_weights
mpiwrapper=%(lalsuite-install)s/bin/lalinference_mpi_wrapper
gracedb=%(lalsuite-install)s/bin/gracedb
ppanalysis=%(lalsuite-install)s/bin/cbcBayesPPAnalysis
pos_to_sim_inspiral=%(lalsuite-install)s/bin/cbcBayesPosToSimInspiral

mpirun = %(lalsuite-install)s/bin/mpirun

accounting_group={{ config["pipelines"]["accounting"]}}
accounting_group_user=daniel.williams

[datafind]
url-type=file
types = {'H1': '{{ production.meta['data']['frame-types']['H1'] }}', 'L1': '{{ production.meta['data']['frame-types']['L1'] }}', 'V1': '{{ production.meta['data']['frame-types']['V1'] }}'}

[data]
channels = {'H1': '{{ production.meta['data']['channels']['H1'] }}','L1': '{{ production.meta['data']['channels']['L1'] }}', 'V1': '{{ production.meta['data']['channels']['V1'] }}'}

[lalinference]
flow = { {% if production.meta['interferometers'] contains "H1" %}'H1': {{ production.quality['lower-frequency']['H1'] }},{% endif %} {% if production.meta['interferometers'] contains "L1" %}'L1': {{ production.quality['lower-frequency']['L1']}},{% endif %} {% if production.meta['interferometers'] contains "V1" %} 'V1': {{ production.quality['lower-frequency']['V1']}} {% endif %} }
fhigh = { {% if production.meta['interferometers'] contains "H1" %}'H1': {{ production.meta['quality']['high-frequency'] }},{% endif %} {% if production.meta['interferometers'] contains "L1" %}'L1': {{ production.meta['quality']['high-frequency'] }},{% endif %} {% if production.meta['interferometers'] contains "V1" %} 'V1': {{ production.meta['quality']['high-frequency'] }} {% endif %} }

[engine]

fref={{ production.quality['reference-frequency'] }}

fmin-template={{ production.quality['start-frequency'] }}

approx = {{ production.meta['approximant'] }}
amporder = {{ production.meta['priors']['amp order'] }}

seglen = {{ production.quality['segment-length'] }}
srate =  {{ production.quality['sample-rate'] }}


enable-spline-calibration =
spcal-nodes = 10
{% if production.meta['interferometers'] contains "H1" %}H1-spcal-envelope = {{ repo_dir}}/{{ production.meta['calibration']['H1'] }}{% endif %}
{% if production.meta['interferometers'] contains "L1" %}L1-spcal-envelope = {{ repo_dir }}/{{ production.meta['calibration']['L1'] }}{% endif %}
{% if production.meta['interferometers'] contains "V1" %}V1-spcal-envelope = {{ repo_dir }}/{{ production.meta['calibration']['V1'] }}{% endif %}

{% if production.meta['interferometers'] contains "H1" %}H1-psd = {{ production.psds['H1'] }}{% endif %}
{% if production.meta['interferometers'] contains "L1" %}L1-psd = {{ production.psds['L1'] }}{% endif %}
{% if production.meta['interferometers'] contains "V1" %}V1-psd = {{ production.psds['V1'] }}{% endif %}

a_spin1-max = 0.99
a_spin2-max = 0.99

{% if production.meta['priors'] contains "chirp-mass" %}
chirpmass-min = {{ production.meta['priors']['chirp-mass'][0] }}
chirpmass-max = {{ production.meta['priors']['chirp-mass'][1] }}
{% endif %}

q-min = {{ production.meta['priors']['q'][0] }}
comp-min = {{ production.meta['priors']['component'][0] }}
comp-max = {{ production.meta['priors']['component'][1] }}

distance-max = {{ production.meta['priors']['distance'][1] }}
{% if  production.meta['priors'] contains "volume" %}
   {% if production.meta['priors']['volume'] == "comoving" %}
distance-prior-comoving-volume = 
   {% endif %}
{% endif %}                                                                                                              


[skyarea]
maxpts=2000

[resultspage]
skyres=0.5
deltaLogP = 7.5

[statevector]
state-vector-channel={'H1': 'H1:GDS-CALIB_STATE_VECTOR_C01', 'L1': 'L1:GDS-CALIB_STATE_VECTOR_C01', 'V1': 'V1:DQ_ANALYSIS_STATE_VECTOR'}
bits=['Bit 0', 'Bit 1', 'Bit 2']


[ligo-skymap-from-samples]
enable-multiresolution=

[ligo-skymap-plot]
annotate=
contour= 50 90

[rift-pseudo-pipe]
# Arguments from util_RIFT_pseudo_pipe.py --help
#  * Fit method can be 'rf', 'gp'
cip-fit-method={{ sampler['fitting-method'] }}
#  * sampler method can be 'default', 'GMM', 'adaptive_cartesian_gpu'      Latter does not imply GPU is used for CIP
cip-sampler-method= {{ sampler['sampling-method'] }}
#   * number of CIP workers running simultaneously.  Larger == lower runtime
cip-explode-jobs= {{ sampler['explode-jobs' ] }}  
internal-use-aligned-phase-coordinates=True
internal-correlate-parameters-default=True
internal-use-rescaled-transverse-spin-coordinates=True


ile-n-eff= {{ sampler['ile-n-eff'] }}
ile-sampler-method= {{ sampler['ile-sampling-method'] }}  #"adaptive_cartesian_gpu"
internal-ile-freezeadapt=True
# * l-max is the maximum mode order.  
# * note by default we *also* change fmin-template to be fmin* (2/Lmax) ! So you will need to override fmin-template if needed
l-max=4
# * distance prior if this argument is *not* set is dL^2
ile-distance-prior="pseudo-cosmo"

# maximum runtime for ILE jobs. May need to be longer
ile-runtime-max-minutes= {{ sampler['ile-runtime-max-minues'] }}  # 700
# Number of likelihood evaluations for each instance. Make this larger if your likelihoods are very fast, smaller if you need low latency
ile-jobs-per-worker= {{ sampler['ile-jobs-per-worker'] }}  # 20

# Add these options to enable OSG runs
use_osg={{ config['general']['osg'] }}
use_osg_file_transfer= {{ config['general']['osg'] }}
use_osg_cip={{ config['general']['osg'] }}


internal-propose-converge-last-stage=True
add-extrinsic=True
batch-extrinsic=True
# * final stage provides time (and distance, if marginalized)
add-extrinsic-time-resampling=True

# Other options needed for this specific analysis
#  force-eta-range : the usual doesn't awlays work; this uses 20:1 prior range, should be set consistently to above
force-eta-range="[0.0453514739,0.24999999999]"
